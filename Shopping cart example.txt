A typical user story consists of three parts:

1)The user or customer who needs the feature or functionality.
2)The action or goal the user wants to achieve.
3)The benefit or reason the user wants to achieve the goal.

"As a [persona or user], I want to [action or goal], so that [benefit or reason]."

For example, a user story for an e-commerce website could be:

"As a customer, I want to be able to add items to my shopping cart and checkout easily, 
so that I can quickly purchase the products I need and complete my transaction."

User stories are usually written on index cards or sticky notes, 
and are often accompanied by acceptance criteria that define what needs to be done for the story to be considered complete. 
Acceptance criteria are typically written in a more technical language and describe the specific conditions that need to be met for the feature or functionality to be considered complete.

Acceptance Criteria:

1)The shopping cart icon should be visible on the product page.
2)The customer should be able to add items to the cart with a single click.
3)The shopping cart should display the correct quantity of items added and the total cost.
4)The shopping cart should allow the user to edit the quantity or remove items.
5)The customer should be able to view the total cost of all items in the cart.
6)The checkout process should be simple and easy to navigate, with clear instructions and a progress indicator.
7)The transaction should be completed successfully without any errors or issues.
8)The customer should be able to choose a payment method and enter payment information.
9)The customer should receive a confirmation of the order and payment after completing the checkout process.


Writing Effective User Stories using the INVEST Criteria

To be effective, user stories should be written using the INVEST criteria, which stands for:

I - Independent: Each user story should be independent of others, meaning that it can be developed and delivered without relying on other stories.

N - Negotiable: User stories should be open to negotiation and discussion, and allow the team to make changes as needed based on feedback and new information.

V - Valuable: User stories should be valuable to the end user or customer, and contribute to the overall goals of the project.

E - Estimable: User stories should be estimable, meaning that the team can provide a reasonable estimate of the effort needed to complete the story.

S - Small: User stories should be small and manageable, and able to be completed within a single sprint.

T - Testable: User stories should be testable, meaning that the team can create acceptance criteria that define what needs to be done for the story to be considered complete.

Here is an example of a user story written using the INVEST criteria:

"As a registered user, I want to be able to view my order history, so that I can track my purchases and ensure that all orders have been delivered."

I-This user story is independent, as it does not rely on any other stories. 
N-It is negotiable, as the specific details of how order history will be displayed can be discussed and refined. 
V-It is valuable, as it provides a useful feature for the user. 
E-It is estimable, as the development team can estimate the effort required to implement this feature. 
S-It is small enough to be completed within a single sprint. 
T-Finally, it is testable, as clear acceptance criteria can be defined to ensure that the feature is working as expected. 
By following the INVEST criteria, this user story can help the development team focus on delivering value to the user while staying agile and flexible in their approach.


Conclusion

User stories are a critical part of software development, as they help to create a shared understanding of what the software should do and why it should be built. 
When written effectively using the INVEST criteria, user stories can be independent, negotiable, valuable, estimable, small, and testable.

Accompanied by acceptance criteria, user stories provide a clear picture of what needs to be done to ensure the feature or functionality is complete and meets the customer's needs. 
By following these best practices, development teams can stay focused on delivering value to the user while remaining agile and flexible in their approach.